# in this project, i created an rds instance on aws manually
# however i plan on automating using terraform
# there were four major stages that i set up which i used to run the pipeline

variables:
  REPOSITORY_URL: 407321317326.dkr.ecr.us-west-2.amazonaws.com/springbootapp
  AWS_DEFAULT_REGION: us-west-2
  IMAGE_TAG: $CI_COMMIT_SHA

stages:
  - build   # this uses builds the projects in a jar file saved into buil/libs 
  - unit tests  # tests made to run againts the rest application at localhot:8080/parts
  - build docker image  #build and push your dockerfile into the repository
  - deploy # uses psql client to connect to database


gradle build stage:
  stage: build
  image: openjdk:12-alpine    # this is how to set up two images for a single job
  script: 
    - ./gradlew flywayClean   # cleans the database so it can be re-initialized
    - ./gradlew flywayMigrate  # runs the database setup scripts located in src/resources/db/migration
    - ./gradlew build   # we can alternatively use ./gradlew bootrun to start the application
  artifacts:
    paths:
      - ./build/libs/

unit testing:
  stage: unit tests
  image: openjdk:12-alpine
  before_script:
    - apk --no-cache add curl
  script:
    - java -jar ./build/libs/ci-demo-0.0.1-SNAPSHOT.jar &  # this command starts the application 
    - sleep 10 
    - ./gradlew test  
    - curl http://localhost:8080/parts 

build-docker-image:
  stage: build docker image
  image: docker:latest
  services:
    - name: docker:dind
  script:
    - apk add --no-cache curl jq python3 py-pip
    - pip install awscli
    - $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
    - docker build -t $REPOSITORY_URL  .
    - docker tag $REPOSITORY_URL:latest $REPOSITORY_URL:$IMAGE_TAG
    - docker push $REPOSITORY_URL:latest
    - docker push $REPOSITORY_URL:$IMAGE_TAG

    
deploy-to-aws-ecr:
  stage: deploy 
  image: python
  stage: deploy
  script:
    - pip install awscli
    - echo $REPOSITORY_URL:$IMAGE_TAG
    - aws ecs register-task-definition --region $AWS_DEFAULT_REGION --family MyTaskDef --cli-input-json file://aws/ecs-task-definition.json
    - aws ecs update-service --region $AWS_DEFAULT_REGION --cluster springbootCluster --service spring --task-definition MyTaskDef
   
    
connect to postgres database:
  stage: deploy
  image: postgres
  script:
     - psql --host=springbootdb.cik7qb7fbrva.us-west-2.rds.amazonaws.com  --port=5432 --username=postgres --no-password --dbname=springbootDB